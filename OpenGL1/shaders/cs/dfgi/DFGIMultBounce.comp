
#version 450 core
#pragma debug(on)

const int PerpixelSparseRays=8;

layout(local_size_x = PerpixelSparseRays, local_size_y = 1) in;
struct DFGIRay{
    vec3 direction;
    vec3 hitPosition;
    vec3 flux;

    uint refCount;
    uint liveCount;
};

// scene cellize
// 32 * 32 * 32 Grids, each grid contians 16 ray
// Downsample factor is 16 by default
layout(std430, binding = 0) buffer DFGIRaysBuffer{
    DFGIRay rays[];
};

uniform sampler2D gPositionRoughness;
uniform sampler2D gNormalDepth;
uniform sampler2D gAlbedoMetallic;
uniform sampler3D GlobalSDF;
uniform vec3 GlobalSDFBoxMin;
uniform vec3 GlobalSDFBoxMax;
uniform int GridContainsRays;
const int MAX_RAY_LIVE_COUNT=32;
uniform vec3 SceneGridsResolution;
uniform vec2 MultBounceDownSample;
uniform vec2 Resolution;

vec3 WorldPosToUVW(vec3 worldPos){
    return (worldPos-GlobalSDFBoxMin)/(GlobalSDFBoxMax-GlobalSDFBoxMin);
}

ivec3 WorldPosToGridIndex(vec3 worldPos){
    vec3 uvw=WorldPosToUVW(worldPos);
    return ivec3(SceneGridsResolution.x*uvw.x,SceneGridsResolution.y*uvw.y,SceneGridsResolution.z*uvw.z);
}

vec3 GridIndexToWorldPos(ivec3 gridIndex){
    vec3 gridSize=(GlobalSDFBoxMax-GlobalSDFBoxMin)/SceneGridsResolution;
    return GlobalSDFBoxMin+(vec3(gridIndex)+vec3(0.5))*gridSize;
}

uint LinearGridIndex(ivec3 gridIndex){
    return uint(gridIndex.z*(SceneGridsResolution.x*SceneGridsResolution.y)+gridIndex.y*SceneGridsResolution.x+gridIndex.x);
} 

bool UVWIsValid(vec3 uvw){
    return uvw.x>=0.0&&uvw.x<=1.0
        &&uvw.y>=0.0&&uvw.y<=1.0
        &&uvw.z>=0.0&&uvw.z<=1.0;
}

const int MAX_TRACE_STEPS = 128;
const float EPS = 0.1;

DFGIRay TraceGlobalSDF(vec3 start,vec3 direction){
    //ray.refCount=1;
    DFGIRay ray;
    ray.refCount=0;
    ray.direction=direction;
    ray.hitPosition=vec3(0);
    vec3 currPosition=start;
    ivec3 originGridIndex=WorldPosToGridIndex(start);
    for(int i=0;i<MAX_TRACE_STEPS;++i){
        vec3 uvw=WorldPosToUVW(currPosition);
        if(UVWIsValid(uvw)){
            float sdfValue=texture(GlobalSDF,uvw).x;
            vec3 nextPosition=currPosition+direction*sdfValue;
            vec3 nextUVW=WorldPosToUVW(nextPosition);
            float nextSDFValue=texture(GlobalSDF,nextUVW).x;
            if(sdfValue>=0&&sdfValue<EPS&&i>0&&originGridIndex!=WorldPosToGridIndex(currPosition)&&(UVWIsValid(nextUVW)&&sdfValue>=nextSDFValue)){
                ray.hitPosition=currPosition;
                ray.refCount=1;
                return ray;
            }
            else if(sdfValue<0){
                return ray;
            }
            else{
                currPosition=nextPosition;
            }
        }
        else{
            return ray;
        }
    }
    return ray;

}

const float PI = 3.14159265359;

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float RadicalInverse_VdC(uint bits) 
{
     bits = (bits << 16u) | (bits >> 16u);
     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
     return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
	return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
	float a = roughness*roughness;
	
	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
	// from spherical coordinates to cartesian coordinates - halfway vector
	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;
	
	// from tangent-space H vector to world-space sample vector
	vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent   = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);
	
	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}

float Power(vec3 l){
    return 0.299*l.x+0.587*l.y+0.114*l.z;
}

//NxN direction
int LinearDirection(vec3 dir){
    float cosTheta=dir.z;
    float sinTheta=sqrt(1-cosTheta*cosTheta);
    float cosPhi=dir.x/sinTheta;
    float sinPhi=dir.y/sinTheta;
    float theta=acos(cosTheta);
    float phi=acos(cosPhi);
    if(sinPhi<0){
        phi=2*PI-phi;
    }

    int div=int(sqrt(GridContainsRays));

    float THETA_PI_DIV=PI/div;
    float PHI_PI_DIV=2*PI/div;

    int thetaIndex=int(theta/THETA_PI_DIV);
    int phiIndex=int(phi/PHI_PI_DIV);

    return phiIndex*div+thetaIndex;

}

void main() {
    uint sampleIndex=gl_LocalInvocationID.x;
    vec2 Xi=Hammersley(sampleIndex,PerpixelSparseRays);
    ivec2 uvIndex = ivec2(gl_WorkGroupID.xy*MultBounceDownSample);

    vec2 uv=uvIndex/Resolution;

    vec3 albedo=texture2D(gAlbedoMetallic,uv).xyz;
    vec3 N=texture2D(gNormalDepth,uv).xyz;
    if(length(N)<0.99||(albedo.x<0.001&&albedo.y<0.001&&albedo.z<0.001)){
        return;
    }
    vec3 worldPos=texture2D(gPositionRoughness,uv).xyz;
    float roughness=texture2D(gPositionRoughness,uv).w;
    vec3 H=ImportanceSampleGGX(Xi,N,roughness);
    vec3 LiDirection=N;
    vec3 LoDirection=normalize(2.0 * dot(LiDirection, H) * H - LiDirection);
    float NdotLi=max(dot(N,LiDirection),0.0);
    float NdotLo=dot(N,LoDirection);
    vec3 flux=albedo*NdotLo/PI;
    
    if(NdotLi>0.01&&NdotLo>0.01&&Power(flux)>0.1){
        
        DFGIRay ray=TraceGlobalSDF(worldPos+LoDirection*0.05,LoDirection);
        if(ray.refCount!=0){
            ray.flux=flux;
            ray.direction=LoDirection;
            ray.liveCount=MAX_RAY_LIVE_COUNT;
            ray.refCount=2;
            ivec3 gridIndex=WorldPosToGridIndex(ray.hitPosition);
            uint linearIndex=LinearGridIndex(gridIndex); 
            int offset=LinearDirection(ray.direction);
            uint rayIndex=linearIndex*GridContainsRays+offset;
            if(Power(rays[rayIndex].flux)<0.1*Power(ray.flux))
                rays[rayIndex]=ray;
            else
                rays[rayIndex].flux=mix(rays[rayIndex].flux,ray.flux,0.1);
        }
    }
}

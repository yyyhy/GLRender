#version 450 core
#extension GL_EXT_shader_atomic_float : enable
#extension GL_EXT_transform_feedback : enable
#pragma debug(on)
#define size 3

layout(local_size_x = size, local_size_y = size, local_size_z=size) in;

struct GridLightInfo{
    vec3 Flux;
    vec3 ImportanceDirection;
    vec3 ImportancePosition;
};

layout(std140 , binding=0) uniform CameraProperty{
    mat4 model;       //0
    mat4 view;        //64
    mat4 projection;  //128
    mat4 mvp;         //192
    mat4 lastMvp;     //256
    vec3 CameraPos;   //320
    vec2 Offset;      //336  272 
};

layout(binding=1,rgba32f) uniform image2D DFGIResult;
uniform sampler3D gSDF;
uniform sampler2D gPositionRoughness;
uniform sampler2D gNormalDepth;
uniform sampler2D gAlbedoMetallic;
uniform vec3 SceneGridsResolution;
uniform vec3 GlobalSDFBoxMin; //vec3(-17.4,-1.7,-7.8);
uniform vec3 GlobalSDFBoxMax; //vec3(17.4,15.6,7.8);

layout(std430, binding = 2) buffer DFGIGridLightInfos{
    GridLightInfo infos[];
};

layout(std430, binding =3 ) buffer DFGIGridCanSparse{
    uint gridCanSparseIndex[];
};

vec3 WorldPosToUVW(vec3 worldPos){
    return (worldPos-GlobalSDFBoxMin)/(GlobalSDFBoxMax-GlobalSDFBoxMin);
}

ivec3 WorldPosToGridIndex(vec3 worldPos){
    vec3 uvw=WorldPosToUVW(worldPos);
    return ivec3(SceneGridsResolution.x*uvw.x,SceneGridsResolution.y*uvw.y,SceneGridsResolution.z*uvw.z);
}

uint LinearGridIndex(ivec3 gridIndex){
    return uint(gridIndex.z*(SceneGridsResolution.x*SceneGridsResolution.y)+gridIndex.y*SceneGridsResolution.x+gridIndex.x);
} 

const float PI = 3.14159265359;

float DistributionGGX(float NdotH, float roughness){
    float a=roughness;
    float ggx=a*a/(PI*pow(NdotH*NdotH*(a*a-1.0)+1.0,2.0));
    return ggx;
}

float GeometrySchlickGGX(float NdotV, float roughness){
    float k=pow(1.0+roughness,2.0)/8.0;
    float g=NdotV/(NdotV*(1.0-k)+k);
    return g;
}

float GeometrySmith(float NdotV,float NdotL, float roughness){
    return GeometrySchlickGGX(NdotV,roughness)*GeometrySchlickGGX(NdotL,roughness);
}

vec3 fresnelSchlick(vec3 F0, float VdotH){
    return F0+(1.0-F0)*pow(1.0-VdotH,5.0);
}

float saturate(float a){
    if(a<0)
        return 0.0;
    if(a>1)
        return 1.0;
    return a;
}

vec3 calcMicroFacedBRDF(vec3 N,vec3 L,vec3 V,vec2 tex){
    
    vec3 albedo=texture(gAlbedoMetallic,tex).xyz;
    float rough=texture(gPositionRoughness,tex).w;
    //rough=0.5;
    vec3 F0 = vec3(0.04); 
    float metallic=texture(gAlbedoMetallic,tex).w;
    //metallic=0.5;
    F0 = mix(F0, albedo, metallic);

    vec3 H = normalize(V + L);
    float NdotL = max(dot(N, L), 0.001); 
    float NdotV = max(dot(N, V), 0.001);
    float VdotH = max(dot(V,H),0.001);
    float NdotH = max(dot(N,H),0.001);

    float NDF = DistributionGGX(NdotH, rough);   
    float G   = GeometrySmith(NdotL,NdotV, rough); 
    vec3 F = fresnelSchlick(F0, VdotH);

    vec3 numerator    = NDF * G * F; 
    float denominator = (4.0 * NdotL * NdotV);
    vec3 BRDF = numerator / vec3(denominator,denominator,denominator);
    return BRDF;
}

vec3 getNormal(vec3 p) {
    float dx = (texture(gSDF,p + vec3(0.01, 0, 0)).x - texture3D(gSDF,p).x) / 0.01;
    float dy = (texture(gSDF,p + vec3(0, 0.01, 0)).x - texture3D(gSDF,p).x) / 0.01;
    float dz = (texture(gSDF,p + vec3(0, 0, 0.01)).x - texture3D(gSDF,p).x) / 0.01;
    return normalize(vec3(dx, dy, dz));
}

shared int Lox;
shared int Loy;
shared int Loz;
shared uint cnt;

bool UVWIsValid(vec3 uvw){
    return uvw.x>=0.0&&uvw.x<=1.0
        &&uvw.y>=0.0&&uvw.y<=1.0
        &&uvw.z>=0.0&&uvw.z<=1.0;
}

void main(){

    
    ivec2 uvIndex = ivec2(gl_WorkGroupID.xy);
    ivec3 gridIndexOffset= ivec3(gl_LocalInvocationID.xyz-1U);
    vec2 uv=vec2(uvIndex)/vec2(800,450);
    vec3 worldPos=texture2D(gPositionRoughness,uv).xyz;
    vec3 N=texture2D(gNormalDepth,uv).xyz;
    if(N.x==0&&N.y==0&&N.z==0){
        imageStore(DFGIResult,uvIndex,vec4(0));
        return;
    }
        
    //validate gSDF
    // vec3 uvw=WorldPosToUVW(worldPos);
    // if(!UVWIsValid(uvw))
    //     return;
    // // uvw.x=1-uvw.x;
    // // uvw.z=1-uvw.z;
    // //uvw.y=1-uvw.y;
    // vec3 normal=getNormal(uvw);
    // imageStore(outputImage,uvIndex,vec4(normal,1));return;
    //
    
    vec3 albedo=texture2D(gAlbedoMetallic,uv).xyz;
    vec3 V=normalize(CameraPos-worldPos); 

    if(gridIndexOffset.x==0U&&gridIndexOffset.y==0U&&gridIndexOffset.z==0U){
        Lox=0;
        Loy=0;
        Loz=0;
        cnt=0;
    }
    groupMemoryBarrier(); memoryBarrierShared(); barrier();

    ivec3 gridIndexLocal=WorldPosToGridIndex(worldPos);
    uint linearGridIndex=LinearGridIndex(gridIndexLocal);
    gridCanSparseIndex[linearGridIndex]=1;
    //test info
    // GridLightInfo info=infos[linearGridIndex];
    // vec3 colo=info.Flux;
    // imageStore(outputImage,uvIndex,vec4(colo,1));return;
    //
    const float sqrt12=3.4641;

    gridIndexLocal+=gridIndexOffset;
    if((gridIndexLocal.x>=0&&gridIndexLocal.y>=0&&gridIndexLocal.z>=0&&
        gridIndexLocal.x<=31&&gridIndexLocal.y<=31&&gridIndexLocal.z<=31))
    {
        uint linearGridIndex=LinearGridIndex(gridIndexLocal);
        GridLightInfo info=infos[linearGridIndex];

        vec3 gridSize=(GlobalSDFBoxMax-GlobalSDFBoxMin)/SceneGridsResolution;
        float attenuation=1-length(worldPos-info.ImportancePosition)/gridSize.x/sqrt12;
        vec3 Li=info.Flux*attenuation;
        float NdotL=max(0,dot(N,-info.ImportanceDirection));
        vec3 Loi=calcMicroFacedBRDF(N,-info.ImportanceDirection,V,uv)*Li*NdotL;
 
        atomicAdd(Lox,int(Loi.x*4024));
        atomicAdd(Loy,int(Loi.y*4024));
        atomicAdd(Loz,int(Loi.z*4024));
        atomicAdd(cnt,1U);
    }           
     
    groupMemoryBarrier(); memoryBarrierShared(); barrier();

    
    if(gridIndexOffset.x==0U&&gridIndexOffset.y==0U&&gridIndexOffset.z==0U){
        vec3 Lo=vec3(Lox,Loy,Loz)/4024/float(cnt);
        imageStore(DFGIResult,uvIndex,vec4(Lo,1));
    }
}
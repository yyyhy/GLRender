
#version 450 core
#extension GL_EXT_shader_atomic_float : enable
#extension GL_EXT_transform_feedback : enable
#pragma debug(on)

const int PerpixelSparseRays=128;

layout(local_size_x = PerpixelSparseRays, local_size_y = 1) in;
struct DFGIRay{
    vec3 direction;
    vec3 hitPosition;
    vec3 flux;

    uint refCount;
    uint liveCount;
};

// scene cellize
// 32 * 32 * 32 Grids, each grid contians 16 ray
// Downsample factor is 16 by default
layout(std430, binding = 0) buffer DFGIRaysBuffer{
    DFGIRay rays[];
};

layout(std430, binding = 1) buffer DFGIRayCounterBuffer{
    uint gridRayCounter[];
};

layout(std430, binding = 2) buffer DFGIRSMSampleWeight{
    uint weight[];
};


uniform vec2 SampleOffset;
uniform sampler2D RSMAlbedoFlag;
uniform sampler2D RSMNormalRoughness;
uniform sampler2D RSMPositionMetallic;
uniform sampler2D RSMTangent;
uniform sampler3D GlobalSDF;
uniform vec3 GlobalSDFBoxMin;
uniform vec3 GlobalSDFBoxMax;
const int GRID_MAX_CONTAINS_RAY=16;
uniform vec2 RSMSampleBrickSize;
const int MAX_RAY_LIVE_COUNT=256;
uniform vec3 SceneGridsResolution;
uniform vec3 LightFlux;
uniform vec3 LightDirection;
uniform vec2 RSMSampleResolution;
uniform vec2 CurrRSMSampleIndex;

vec3 WorldPosToUVW(vec3 worldPos){
    return (worldPos-GlobalSDFBoxMin)/(GlobalSDFBoxMax-GlobalSDFBoxMin);
}

ivec3 WorldPosToGridIndex(vec3 worldPos){
    vec3 uvw=WorldPosToUVW(worldPos);
    return ivec3(SceneGridsResolution.x*uvw.x,SceneGridsResolution.y*uvw.y,SceneGridsResolution.z*uvw.z);
}

vec3 GridIndexToWorldPos(ivec3 gridIndex){
    vec3 gridSize=(GlobalSDFBoxMax-GlobalSDFBoxMin)/SceneGridsResolution;
    return GlobalSDFBoxMin+(vec3(gridIndex)+vec3(0.5))*gridSize;
}

uint LinearGridIndex(ivec3 gridIndex){
    return uint(gridIndex.z*(SceneGridsResolution.x*SceneGridsResolution.y)+gridIndex.y*SceneGridsResolution.x+gridIndex.x);
} 

uint LinearRSMSampleIndex(vec2 index){
    return uint(index.y*RSMSampleResolution.x+index.x);
}

bool UVWIsValid(vec3 uvw){
    return uvw.x>=0.0&&uvw.x<=1.0
        &&uvw.y>=0.0&&uvw.y<=1.0
        &&uvw.z>=0.0&&uvw.z<=1.0;
}

const int MAX_TRACE_STEPS = 128;
const float EPS = 0.3;

void TraceGlobalSDF(vec3 start,vec3 direction,out DFGIRay ray){
    //ray.refCount=1;
    vec3 currPosition=start;
    for(int i=0;i<MAX_TRACE_STEPS;++i){
        vec3 uvw=WorldPosToUVW(currPosition);
        if(UVWIsValid(uvw)){
            float sdfValue=texture3D(GlobalSDF,uvw).x;
            if(sdfValue<EPS&&i>0){
                ray.hitPosition=currPosition;
                ray.refCount=1;
                return;
            }
            else{
                currPosition+=direction*sdfValue;
            }
        }
        else{
            return;
        }
    }

}

const float PI = 3.14159265359;

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float RadicalInverse_VdC(uint bits) 
{
     bits = (bits << 16u) | (bits >> 16u);
     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
     return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
	return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N,vec3 tangent, float roughness)
{
	float a = roughness*roughness;
	
	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
	// from spherical coordinates to cartesian coordinates - halfway vector
	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;
	
	// from tangent-space H vector to world-space sample vector
	vec3 up          = N;
	vec3 bitangent = cross(N, tangent);
	
    mat3 TBN=mat3(tangent,bitangent,N);
	//vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    vec3 sampleVec=TBN*H;
	return normalize(sampleVec);
}


void main() {
    uint sampleIndex=gl_LocalInvocationID.x;
    vec2 Xi=Hammersley(sampleIndex,PerpixelSparseRays);
#define IS_SAMPLE_RSM

#ifdef IS_SAMPLE_RSM
    ivec2 uvIndex = ivec2(gl_WorkGroupID.xy)+ivec2(CurrRSMSampleIndex*RSMSampleBrickSize);
#else    
    ivec2 uvIndex = ivec2(gl_WorkGroupID.xy)*RSMSampleBrickSize+ivec2(SampleOffset);
#endif

    vec2 uv=uvIndex/vec2(1600,900);

    vec3 albedo=texture2D(RSMAlbedoFlag,uv).xyz;
    vec3 N=texture2D(RSMNormalRoughness,uv).xyz;
    if(length(N)<0.99){
        return;
    }
    vec3 worldPos=texture2D(RSMPositionMetallic,uv).xyz;
    vec3 tangent=texture2D(RSMTangent,uv).xyz;
    float roughness=texture2D(RSMNormalRoughness,uv).w;

    vec3 H=ImportanceSampleGGX(Xi,N,tangent,roughness);
    vec3 V=-LightDirection;
    vec3 L=normalize(2.0 * dot(V, H) * H - V);
    float NdotL=max(dot(N,V),0.0);
    vec3 flux=LightFlux*albedo*NdotL/PI;

    if(NdotL>0.0){
        DFGIRay ray;     
        ray.refCount=0;
        ray.hitPosition=vec3(0,0,0);
        TraceGlobalSDF(worldPos+L*(EPS*1.1),L,ray);
        if(ray.refCount!=0){
            uint rsmIndex=LinearRSMSampleIndex(CurrRSMSampleIndex);
            atomicAdd(weight[rsmIndex],1U);
            
            ray.flux=flux;
            ray.direction=L;
            ray.liveCount=MAX_RAY_LIVE_COUNT;
            ivec3 gridIndex=WorldPosToGridIndex(ray.hitPosition);
            uint linearIndex=LinearGridIndex(gridIndex); 
            uint rayCount=atomicAdd(gridRayCounter[linearIndex],1)%GRID_MAX_CONTAINS_RAY;
            gridRayCounter[linearIndex]%=GRID_MAX_CONTAINS_RAY;
            uint rayIndex=linearIndex*GRID_MAX_CONTAINS_RAY+rayCount;

            //if(length(ray.flux)>length(rays[rayIndex].flux*rays[rayIndex].liveCount/MAX_RAY_LIVE_COUNT)){
                rays[rayIndex]=ray;
            //} 
        }
    }
}

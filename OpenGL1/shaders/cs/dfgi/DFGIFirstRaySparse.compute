
#version 460 core
layout(local_size_x = 16, local_size_y = 1) in;
struct DFGIRay{
    vec3 direction;
    vec3 hitPosition;
    vec3 flux;

    uint refCount;
};

layout(rgba32f) uniform image2D RSMAlbedoFlag;
layout(rgba32f) uniform image2D RSMNormalRoughness;
layout(rgba32f) uniform image2D RSMPositionMetallic;

// scene cellize
// 32 * 32 * 32 Grids, each grid contians 16 ray
// Downsample factor is 16 by default
layout(std430, binding = 3) buffer RayBuffer{
    DFGIRay rays[32*32*32*16];
};

layout(std430, binding = 4) buffer RayCounterBuffer{
    uint gridRayCounter[32*32*32];
};
uniform sampler3D GlobalSDF;
uniform vec3 GlobalSDFBoxMin;
uniform vec3 GlobalSDFBoxMax;
const int GRID_MAX_CONTAINS_RAY=16;
const int DOWN_SAMPLE=16;
uniform ivec3 SceneGridsResolution;
uniform vec3 LightFlux;

vec3 WorldPosToUVW(vec3 worldPos){
    return (worldPos-GlobalSDFBoxMin)/(GlobalSDFBoxMax-GlobalSDFBoxMin);
}

ivec3 WorldPosToGridIndex(vec3 worldPos){
    vec3 uvw=WorldPosToUVW(worldPos);
    return ivec3(SceneGridsResolution.x*uvw.x,SceneGridsResolution.y*uvw.y,SceneGridsResolution.z*uvw.z);
}

uint LinearGridIndex(ivec3 gridIndex){
    return (gridIndex.z*(SceneGridsResolution.x*SceneGridsResolution.y)+gridIndex.y*SceneGridsResolution.x+gridIndex.x);
} 

bool UVWIsValid(vec3 uvw){
    return uvw.x>=0.0&&uvw.x<=1.0
        &&uvw.y>=0.0&&uvw.y<=1.0
        &&uvw.z>=0.0&&uvw.z<=1.0;
}

const int MAX_TRACE_STEPS = 128;
const float EPS = 0.1;

void TraceGlobalSDF(vec3 start,vec3 direction,out DFGIRay ray){
    vec3 currPosition=start;
    for(int i=0;i<MAX_TRACE_STEPS;++i){
        vec3 uvw=WorldPosToUVW(currPosition);
        if(UVWIsValid(uvw)){
            float sdfValue=texture3D(GlobalSDF,uvw).x;
            if(sdfValue<EPS){
                ray.hitPosition=currPosition;
                ray.refCount++;
            }
            else{
                currPosition+=direction*sdfValue;
            }
        }
        else{
            return;
        }
    }

}

const float PI = 3.14159265359;

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float RadicalInverse_VdC(uint bits) 
{
     bits = (bits << 16u) | (bits >> 16u);
     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
     return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
	return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
	float a = roughness*roughness;
	
	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
	// from spherical coordinates to cartesian coordinates - halfway vector
	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;
	
	// from tangent-space H vector to world-space sample vector
	vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent   = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);
	
	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}


void main() {
    ivec2 uvIndex = ivec2(gl_GlobalInvocationID.xy);
    ivec2 uv=uvIndex*DOWN_SAMPLE;
    vec3 albedo=imageLoad(RSMAlbedoFlag,uv).xyz;
    vec3 N=imageLoad(RSMNormalRoughness,uv).xyz;
    vec3 worldPos=imageLoad(RSMPositionMetallic,uv).xyz;
    float roughness=imageLoad(RSMNormalRoughness,uv).w;

    uint sampleIndex=gl_LocalInvocationID.x;
    vec2 Xi=Hammersley(sampleIndex,16);
    vec3 H=ImportanceSampleGGX(Xi,N,roughness);
    vec3 L=normalize(2.0 * dot(N, H) * H - N);
    float NdotL=max(dot(N,L),0.0);
    if(NdotL>0.0){
        DFGIRay ray;
        ray.flux=LightFlux*albedo*NdotL/PI;
        ray.direction=L;
        ray.refCount=0;
        ray.hitPosition=vec3(0,0,0);

        TraceGlobalSDF(worldPos,L,ray);
        if(ray.refCount!=0){
            ivec3 gridIndex=WorldPosToGridIndex(ray.hitPosition);
            uint linearIndex=LinearGridIndex(gridIndex);

            uint rayCount=gridRayCounter[linearIndex];
            gridRayCounter[linearIndex]=(gridRayCounter[linearIndex]+1)%GRID_MAX_CONTAINS_RAY;
            uint rayIndex=linearIndex*GRID_MAX_CONTAINS_RAY+rayCount;
            rays[rayIndex]=ray;
        }
    }
}

#version 450 core
#extension GL_EXT_shader_atomic_float : enable
#extension GL_EXT_transform_feedback : enable
#pragma debug(on)

const int SHLevel=1;
const int SHSample=8;
layout(local_size_x = SHLevel, local_size_y = SHSample, local_size_z=1) in;

layout(std140 , binding=0) uniform CameraProperty{
    mat4 model;       //0
    mat4 view;        //64
    mat4 projection;  //128
    mat4 mvp;         //192
    mat4 lastMvp;     //256
    vec3 CameraPos;   //320
    vec2 Offset;      //336  272 
};

layout(binding=1,rgba32f) uniform image2D DFGIResult;
uniform sampler2D gPositionRoughness;
uniform sampler2D gNormalDepth;
uniform sampler2D gAlbedoMetallic;
uniform vec3 SceneGridsResolution;
uniform vec3 GlobalSDFBoxMin; //vec3(-17.4,-1.7,-7.8);
uniform vec3 GlobalSDFBoxMax; //vec3(17.4,15.6,7.8);
uniform bool NeedMarkGridCanMultBounce;

struct DFGISH{
    vec4 shCi[9];
};

layout(std430, binding = 2) buffer DFGISHBuffer{
    DFGISH sh[];
};

vec3 WorldPosToUVW(vec3 worldPos){
    return (worldPos-GlobalSDFBoxMin)/(GlobalSDFBoxMax-GlobalSDFBoxMin);
}

ivec3 WorldPosToGridIndex(vec3 worldPos){
    vec3 uvw=WorldPosToUVW(worldPos);
    return ivec3(SceneGridsResolution.x*uvw.x,SceneGridsResolution.y*uvw.y,SceneGridsResolution.z*uvw.z);
}

uint LinearGridIndex(ivec3 gridIndex){
    return uint(gridIndex.z*(SceneGridsResolution.x*SceneGridsResolution.y)+gridIndex.y*SceneGridsResolution.x+gridIndex.x);
} 

const float PI = 3.14159265359;

float DistributionGGX(float NdotH, float roughness){
    float a=roughness;
    float ggx=a*a/(PI*pow(NdotH*NdotH*(a*a-1.0)+1.0,2.0));
    return ggx;
}

float GeometrySchlickGGX(float NdotV, float roughness){
    float k=pow(1.0+roughness,2.0)/8.0;
    float g=NdotV/(NdotV*(1.0-k)+k);
    return g;
}

float GeometrySmith(float NdotV,float NdotL, float roughness){
    return GeometrySchlickGGX(NdotV,roughness)*GeometrySchlickGGX(NdotL,roughness);
}

vec3 fresnelSchlick(vec3 F0, float VdotH){
    return F0+(1.0-F0)*pow(1.0-VdotH,5.0);
}

float saturate(float a){
    if(a<0)
        return 0.0;
    if(a>1)
        return 1.0;
    return a;
}

vec3 calcMicroFacedBRDF(vec3 N,vec3 L,vec3 V,vec2 tex){
    
    vec3 albedo=texture(gAlbedoMetallic,tex).xyz;
    float rough=texture(gPositionRoughness,tex).w;
    //rough=0.5;
    vec3 F0 = vec3(0.04); 
    float metallic=texture(gAlbedoMetallic,tex).w;
    //metallic=0.5;
    F0 = mix(F0, albedo, metallic);

    vec3 H = normalize(V + L);
    float NdotL = max(dot(N, L), 0.001); 
    float NdotV = max(dot(N, V), 0.001);
    float VdotH = max(dot(V,H),0.001);
    float NdotH = max(dot(N,H),0.001);

    float NDF = DistributionGGX(NdotH, rough);   
    float G   = GeometrySmith(NdotL,NdotV, rough); 
    vec3 F = fresnelSchlick(F0, VdotH);

    vec3 numerator    = NDF * G * F; 
    float denominator = (4.0 * NdotL * NdotV);
    vec3 BRDF = numerator / vec3(denominator,denominator,denominator);
    return BRDF;
}

float P(int l, int m, float x)
{
    // evaluate an Associated Legendre Polynomial P(l,m,x) at x
    float pmm = 1.0;
    if (m > 0) {
        float somx2 = sqrt((1.0 - x) * (1.0 + x));
        float fact = 1.0;
        for (int i = 1; i <= m; i++) {
            pmm *= (-fact) * somx2;
            fact += 2.0;
        }
    }
    if (l == m) return pmm;
    float pmmp1 = x * (2.0 * m + 1.0) * pmm;
    if (l == m + 1) return pmmp1;
    float pll = 0.0;
    for (int ll = m + 2; ll <= l; ++ll) {
        pll = ((2.0 * ll - 1.0) * x * pmmp1 - (ll + m - 1.0) * pmm) / (ll - m);
        pmm = pmmp1;
        pmmp1 = pll;
    }
    return pll;
}

int factorial(int v) {
    int res = 1;
    while (v > 1)
    {
        res *= v;
        v--;
    }
    return res;
}

float K(int l, int m)
{
    // renormalisation constant for SH function
    float temp = ((2.0 * l + 1.0) * factorial(l - m)) / (4.0 * PI * factorial(l + m));
    return sqrt(temp);
}

float SH(int l, int m, float theta, float phi)
{
    // return a point sample of a Spherical Harmonic basis function
    // l is the band, range [0..N]
    // m in the range [-l..l]
    // theta in the range [0..Pi]
    // phi in the range [0..2*Pi]
    const float sqrt2 = sqrt(2.0);
    if (m == 0) return K(l, 0) * P(l, m, cos(theta));
    else if (m > 0) return sqrt2 * K(l, m) * cos(m * phi) * P(l, m, cos(theta));
    else return sqrt2 * K(l, -m) * sin(-m * phi) * P(l, -m, cos(theta));
}


float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float RadicalInverse_VdC(uint bits) 
{
     bits = (bits << 16u) | (bits >> 16u);
     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
     return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
	return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
	float a = roughness*roughness;
	
	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
	// from spherical coordinates to cartesian coordinates - halfway vector
	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;
	
	// from tangent-space H vector to world-space sample vector
	vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent   = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);
	
	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}

shared int Lox;
shared int Loy;
shared int Loz;

bool UVWIsValid(vec3 uvw){
    return uvw.x>=0.0&&uvw.x<=1.0
        &&uvw.y>=0.0&&uvw.y<=1.0
        &&uvw.z>=0.0&&uvw.z<=1.0;
}

const ivec2 shTable[]={ivec2(0,0),ivec2(1,-1),ivec2(1,0),ivec2(1,1),ivec2(2,-2),ivec2(2,-1),ivec2(2,0),ivec2(2,1),ivec2(2,2)};

void main(){

    
    ivec2 uvIndex = ivec2(gl_WorkGroupID.xy);
    uint ciIndex=gl_LocalInvocationID.x;
    uint sampleIndex=gl_LocalInvocationID.y;

    vec2 uv=vec2(uvIndex)/vec2(gl_NumWorkGroups.xy);
    vec3 worldPos=texture2D(gPositionRoughness,uv).xyz;
    float roughness=texture2D(gPositionRoughness,uv).w;
    vec3 N=texture2D(gNormalDepth,uv).xyz;
    if(N.x==0&&N.y==0&&N.z==0){
        imageStore(DFGIResult,uvIndex,vec4(0));
        return;
    }
    
    vec3 albedo=texture2D(gAlbedoMetallic,uv).xyz;
    vec3 V=normalize(CameraPos-worldPos); 

    if(ciIndex==0&&sampleIndex==0){
        Lox=0;
        Loy=0;
        Loz=0;
    }
    groupMemoryBarrier(); memoryBarrierShared(); barrier();

    ivec3 gridIndexLocal=WorldPosToGridIndex(worldPos);
    uint linearGridIndex=LinearGridIndex(gridIndexLocal);
   
    DFGISH shi=sh[linearGridIndex];
    vec4 ci=shi.shCi[ciIndex];
    ivec2 shlm=shTable[ciIndex];
    vec2 Xi=Hammersley(sampleIndex,SHSample);
    vec3 H=ImportanceSampleGGX(Xi,N,1);
    vec3 L=normalize(2.0 * dot(V, H) * H - V);
    float NdotL=max(dot(N,L),0.0);
    if(NdotL>0){
        vec3 dir=L;
        float cosTheta=dir.z;
        float sinTheta=sqrt(1-cosTheta*cosTheta);
        float cosPhi=dir.x/sinTheta;
        float sinPhi=dir.y/sinTheta;
        float theta=acos(cosTheta);
        float phi=acos(cosPhi);
        if(sinPhi<0){
            phi=2*PI-phi;
        }

        vec3 Li=vec3(0);
        for(int i=0;i<4;++i)
            Li+=vec3(shi.shCi[i]*SH(shTable[i].x,shTable[i].y,theta,phi));
        vec3 Loi=calcMicroFacedBRDF(N,L,V,uv)*Li*NdotL;
        atomicAdd(Lox,int(Loi.x*4024));
        atomicAdd(Loy,int(Loi.y*4024));
        atomicAdd(Loz,int(Loi.z*4024));
    }

    groupMemoryBarrier(); memoryBarrierShared(); barrier();

    
    if(ciIndex==0&&sampleIndex==0){
        vec3 Lo=vec3(Lox,Loy,Loz)/4024*2*PI/SHSample;
        vec3 col=imageLoad(DFGIResult,uvIndex).xyz;
        imageStore(DFGIResult,uvIndex,vec4(mix(col,Lo,1),1));
    }
}